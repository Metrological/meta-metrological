diff --git a/Tools/JsonGenerator/JsonGenerator.py b/Tools/JsonGenerator/JsonGenerator.py
index 01c60c0..1c88ff0 100755
--- a/Tools/JsonGenerator/JsonGenerator.py
+++ b/Tools/JsonGenerator/JsonGenerator.py
@@ -9,7 +9,7 @@ class Trace:
     def __init__(self):
         self.errors = 0
     def __Print(self, text):
-        print text
+        print(text)
     def Header(self, text):
         self.__Print(text)
     def Warn(self, text):
@@ -26,7 +26,7 @@ try:
     import jsonref
 except:
     trace.Error("Install jsonref first")
-    print "e.g. try 'pip install jsonref'"
+    print("e.g. try 'pip install jsonref'")
     sys.exit(1)
 
 INDENT_SIZE = 4
@@ -199,7 +199,7 @@ class JsonEnum(JsonType):
                 classname = MakeEnum(self.CppName())
             return classname
     def CppEnumerators(self):
-        return map(lambda x: ("E" if x[0].isdigit() else "") + x.upper(), self.enumerators)
+        return [("E" if x[0].isdigit() else "") + x.upper() for x in self.enumerators]
     def CppEnumeratorValues(self):
         return self.values
     def IsDuplicate(self):
@@ -234,7 +234,7 @@ class JsonObject(JsonType):
                 self.origRef = obj
                 if obj.parent != parent:
                     obj.AddRef(self)
-            for prop_name, prop in schema["properties"].iteritems():
+            for prop_name, prop in schema["properties"].items():
                 newObject = JsonItem(prop_name, self, prop, included=included)
                 self.properties.append(newObject)
                 # Handle aggregate objects
@@ -413,27 +413,27 @@ class JsonRpcSchema(JsonType):
         if "interface" in schema:
             schema = schema["interface"]
         if "include" in schema:
-            for name, s in schema["include"].iteritems():
+            for name, s in schema["include"].items():
                 include = s["info"]["class"]
                 self.includes.append(include)
                 if "methods" in s:
-                    for name, method in s["methods"].iteritems():
+                    for name, method in s["methods"].items():
                         newMethod = JsonMethod(name, self, method, include)
                         self.methods.append(newMethod)
                 if "properties" in s:
-                    for name, method in s["properties"].iteritems():
+                    for name, method in s["properties"].items():
                         newMethod = JsonProperty(name, self, method, include)
                         self.methods.append(newMethod)
                 if "events" in s:
-                    for name, method in s["events"].iteritems():
+                    for name, method in s["events"].items():
                         newMethod = JsonNotification(name, self, method, include)
                         self.methods.append(newMethod)
 
-        method_list = map(lambda x: x.name, self.methods)
+        method_list = [x.name for x in self.methods]
 
         def __AddMethods(section, schema, ctor):
             if section in schema:
-                for name, method in schema[section].iteritems():
+                for name, method in schema[section].items():
                     if name in method_list:
                         del self.methods[method_list.index(name)]
                         method_list.remove(name)
@@ -514,7 +514,7 @@ def LoadSchema(file, include_path):
                         ref_tok[0] = os.path.join(path, ref_tok[0])
                 if not os.path.isfile(ref_tok[0]):
                     raise RuntimeError("$ref file '%s' not found" % ref_tok[0])
-                ref_file = '"file:%s#%s"' % (urllib.pathname2url(ref_tok[0]), ref_tok[1])
+                ref_file = '"file:%s#%s"' % (urllib.request.pathname2url(ref_tok[0]), ref_tok[1])
                 tokens[c + 2] = ref_file
         # Return back the preprocessed JSON as a string
         return " ".join(tokens)
@@ -540,10 +540,10 @@ def SortByDependency(objects):
     sortedObjects = []
     # This will order objects by their relations
     for obj in sorted(objects, key=lambda x: x.CppClass(), reverse=False):
-        found = filter(lambda sortedObj: obj.CppClass() in map(lambda x: x.CppClass(), sortedObj.Objects()), sortedObjects)
+        found = [sortedObj for sortedObj in sortedObjects if obj.CppClass() in [x.CppClass() for x in sortedObj.Objects()]]
         if found:
-            index = min(map(lambda x: sortedObjects.index(x), found))
-            movelist = filter(lambda x: x.CppClass() in map(lambda x: x.CppClass(), sortedObjects), obj.Objects())
+            index = min([sortedObjects.index(x) for x in found])
+            movelist = [x for x in obj.Objects() if x.CppClass() in [x.CppClass() for x in sortedObjects]]
             sortedObjects.insert(index, obj)
             for m in movelist:
                 if m in sortedObjects:
@@ -566,7 +566,7 @@ class ObjectTracker:
     def Add(self, newObj):
         def __Compare(lhs, rhs):
             # NOTE: Two objects are considered identical if they have the same property names and types only!
-            for name, prop in lhs.iteritems():
+            for name, prop in lhs.items():
                 if name not in rhs:
                     return False
                 elif rhs[name]["type"] != prop["type"]:
@@ -577,7 +577,7 @@ class ObjectTracker:
                             return False
                     else:
                         return False
-            for name, prop in rhs.iteritems():
+            for name, prop in rhs.items():
                 if name not in lhs:
                     return False
                 elif lhs[name]["type"] != prop["type"]:
@@ -604,7 +604,7 @@ class ObjectTracker:
     def Reset(self):
         self.objects = []
     def CommonObjects(self):
-        return SortByDependency(filter(lambda obj: obj.RefCount() > 1, self.Objects()))
+        return SortByDependency([obj for obj in self.Objects() if obj.RefCount() > 1])
 
 class EnumTracker(ObjectTracker):
     def __IsTopmost(self, obj):
@@ -743,7 +743,7 @@ def EmitHelperCode(root, emit, header_file):
                 has_statuslistener = True
                 break
 
-        print "Emitting registration code..."
+        print("Emitting registration code...")
         emit.Line("/*")
         emit.Indent()
         emit.Line("// Copy the code below to %s class definition" % root.JsonName())
@@ -855,13 +855,13 @@ def EmitHelperCode(root, emit, header_file):
         emit.Line()
 
         # Method/property/event stubs
-        print "Emitting stubs..."
+        print("Emitting stubs...")
         emit.Line("// API implementation")
         emit.Line("//")
         emit.Line()
         for method in root.Properties():
             if not isinstance(method, JsonNotification) and not isinstance(method, JsonProperty):
-                print "Emitting method '%s'" % method.JsonName()
+                print("Emitting method '%s'" % method.JsonName())
                 params = method.Properties()[0].CppType()
                 if method.Summary():
                     emit.Line("// Method: %s - %s" % (method.JsonName(), method.Summary().split(".",1)[0]))
@@ -931,7 +931,7 @@ def EmitHelperCode(root, emit, header_file):
                     emit.Unindent()
                     emit.Line("}")
                     emit.Line()
-                print "Emitting property '%s'%s" % (method.JsonName(), " (write-only)" if method.writeonly else " (read-only)" if method.readonly else "")
+                print("Emitting property '%s'%s" % (method.JsonName(), " (write-only)" if method.writeonly else " (read-only)" if method.readonly else ""))
                 if not method.writeonly:
                     EmitPropertyFc(method, method.GetMethodName(), True)
                 if not method.readonly:
@@ -939,7 +939,7 @@ def EmitHelperCode(root, emit, header_file):
 
         for method in root.Properties():
             if isinstance(method, JsonNotification):
-                print "Emitting notification '%s'" % method.JsonName()
+                print("Emitting notification '%s'" % method.JsonName())
                 params = method.Properties()[0].CppType()
                 if method.Summary():
                     emit.Line("// Event: %s - %s" % (method.JsonName(), method.Summary().split(".",1)[0]))
@@ -987,7 +987,7 @@ def EmitObjects(root, emit, emitCommon = False):
     def EmitEnum(enum):
         global emittedItems
         emittedItems += 1
-        print "Emitting enum %s" % enum.CppClass()
+        print("Emitting enum %s" % enum.CppClass())
         root = enum.parent.parent
         while root.parent:
             root = root.parent
@@ -1034,7 +1034,7 @@ def EmitObjects(root, emit, emitCommon = False):
         if jsonObj.IsDuplicate() or (not allowDup and jsonObj.RefCount() > 1):
             return
         if not isinstance(jsonObj, (JsonRpcSchema, JsonMethod)):
-            print "Emitting class '%s' (source: '%s')" % (jsonObj.CppClass(), jsonObj.OrigName())
+            print("Emitting class '%s' (source: '%s')" % (jsonObj.CppClass(), jsonObj.OrigName()))
             emit.Line("class %s : public %s {" % (jsonObj.CppClass(), TypePrefix("Container")))
             emit.Line("public:")
             if jsonObj.Enums():
@@ -1117,7 +1117,7 @@ def EmitObjects(root, emit, emitCommon = False):
     emit.Indent()
     emit.Line()
     if emitCommon and enumTracker.CommonObjects():
-        print "Emitting common enums..."
+        print("Emitting common enums...")
         emit.Line("// Common enums")
         emit.Line("//")
         emit.Line()
@@ -1125,7 +1125,7 @@ def EmitObjects(root, emit, emitCommon = False):
             if not obj.IsDuplicate() and not obj.included_from:
                 EmitEnum(obj)
     if emitCommon and objTracker.CommonObjects():
-        print "Emitting common classes..."
+        print("Emitting common classes...")
         emit.Line("// Common classes")
         emit.Line("//")
         emit.Line()
@@ -1133,7 +1133,7 @@ def EmitObjects(root, emit, emitCommon = False):
             if not obj.included_from:
                 EmitClass(obj, True)
     if root.Objects():
-        print "Emitting params/result classes..."
+        print("Emitting params/result classes...")
         emit.Line("// Method params/result classes")
         emit.Line("//")
         emit.Line()
@@ -1287,7 +1287,7 @@ def CreateDocument(schema, path):
                 if obj["type"] == "object":
                     if "required" not in obj and name and len(obj["properties"]) > 1:
                         trace.Warn('No "required" field for object "%s"' % name)
-                    for pname, props in obj["properties"].iteritems():
+                    for pname, props in obj["properties"].items():
                         __TableObj(pname, props, parentName+"/"+name, obj, prefix, False)
                 elif obj["type"] == "array":
                     __TableObj("", obj["items"], parentName+"/"+name, obj, (prefix + "[#]") if name else "", optional)
@@ -1305,7 +1305,7 @@ def CreateDocument(schema, path):
 
         def PlainTable(obj, columns, ref="ref"):
             MdTableHeader(columns)
-            for prop,val in sorted(obj.iteritems()):
+            for prop,val in sorted(obj.items()):
                 MdRow(["<a name=\"%s.%s\">%s</a>" % (ref, (prop.split("]",1)[0][1:]) if "]" in prop else prop, prop), val])
             MdBr()
 
@@ -1452,7 +1452,7 @@ def CreateDocument(schema, path):
         if "events" in interface:
             event_count = len(interface["events"])
         if "include" in interface:
-            for name, iface in interface["include"].iteritems():
+            for name, iface in interface["include"].items():
                 if "methods" in iface:
                     method_count += len(iface["methods"])
                 if "properties" in iface:
@@ -1587,7 +1587,7 @@ def CreateDocument(schema, path):
             def InterfaceDump(interface, section, header):
                 head = False
                 if section in interface:
-                    for method, contents in interface[section].iteritems():
+                    for method, contents in interface[section].items():
                         if contents and method not in skip_list:
                             if not head:
                                 MdParagraph("%s interface %s:" % (interface["info"]["class"], section))
@@ -1618,7 +1618,7 @@ def CreateDocument(schema, path):
             MdParagraph("The following %s are provided by the %s plugin:" % (section, plugin_class))
             InterfaceDump(interface, section, header)
             if "include" in interface:
-                for name, s in interface["include"].iteritems():
+                for name, s in interface["include"].items():
                     if s:
                         if section in s:
                             MdBr()
@@ -1631,17 +1631,17 @@ def CreateDocument(schema, path):
             skip_list = []
 
             if section in interface:
-                for method, props in interface[section].iteritems():
+                for method, props in interface[section].items():
                     if props:
                         MethodDump(method, props, plugin_class, event, prop)
                     skip_list.append(method)
 
             if "include" in interface:
-                for name, s in interface["include"].iteritems():
+                for name, s in interface["include"].items():
                     if s:
                         cl = s["info"]["class"]
                         if section in s:
-                            for method, props in s[section].iteritems():
+                            for method, props in s[section].items():
                                 if props and method not in skip_list:
                                     MethodDump(method, props, plugin_class, event, prop, cl)
 
@@ -1700,7 +1700,7 @@ if __name__ == "__main__":
     generateStubs = args.stubs
 
     if args.version:
-        print "Version: %s" % VERSION
+        print("Version: %s" % VERSION)
         sys.exit(1)
     elif not args.path or (not generateCode and not generateStubs and not generateDocs):
         argparser.print_help()
@@ -1735,6 +1735,6 @@ if __name__ == "__main__":
                 trace.Error(str(err))
             except ValueError as err:
                 trace.Error(str(err))
-        print "\nJsonGenerator: All done. %s error%s." % (trace.errors if trace.errors else "No", "" if trace.errors == 1 else "s")
+        print("\nJsonGenerator: All done. %s error%s." % (trace.errors if trace.errors else "No", "" if trace.errors == 1 else "s"))
         if trace.errors:
             sys.exit(1)
diff --git a/Tools/ProxyStubGenerator/CppParser.py b/Tools/ProxyStubGenerator/CppParser.py
index bf8dc08..a98cc6c 100755
--- a/Tools/ProxyStubGenerator/CppParser.py
+++ b/Tools/ProxyStubGenerator/CppParser.py
@@ -414,7 +414,7 @@ class Variable(Type, Identifier):
     def __repr__(self):
         return str(self)
 
-class Parameter(Type, Variable):
+class Parameter(Variable):
     def __init__(self, parent_block, string, value = [], valid_specifiers = []):
         Variable.__init__(self, parent_block, string, value, valid_specifiers)
     def __str__(self):
@@ -452,7 +452,7 @@ class Enumerator(Type, Identifier):
         Identifier.__init__(self, parent_enum, self.name)
         self.parent = parent_block
         self.value = parent_block.GetValue() if value == None else Evaluate(value)
-        if isinstance(self.value, (int, long)):
+        if isinstance(self.value, int):
             self.parent.SetValue(self.value)
         self.parent.items.append(self)
     def __str__(self):
@@ -992,22 +992,22 @@ def DumpTree(tree, ind = 0):
     indent = ind*" "
 
     if isinstance(tree, (Namespace, Class)):
-        print indent + str(tree)
+        print(indent + str(tree))
 
         for td in tree.typedefs:
-            print indent + 2*" " + str(td)
+            print(indent + 2*" " + str(td))
 
         for e in tree.enums:
-            print indent + 2*" " + str(e)
+            print(indent + 2*" " + str(e))
             for item in e.items:
-                print indent + 4*" " + str(item)
+                print(indent + 4*" " + str(item))
 
     for v in tree.vars:
-        print indent + 2*" " + str(v)
+        print(indent + 2*" " + str(v))
 
     if isinstance(tree, (Namespace, Class)):
         for m in tree.methods:
-           print indent + 2*" " + str(m)
+           print(indent + 2*" " + str(m))
 
     if isinstance(tree, (Namespace, Class)):
         for c in tree.classes:
@@ -1025,4 +1025,4 @@ if __name__ == "__main__":
     if isinstance(tree, Namespace):
          DumpTree(tree)
     else:
-        print tree
+        print(tree)
diff --git a/Tools/ProxyStubGenerator/StubGenerator.py b/Tools/ProxyStubGenerator/StubGenerator.py
index 5237c62..731b82c 100755
--- a/Tools/ProxyStubGenerator/StubGenerator.py
+++ b/Tools/ProxyStubGenerator/StubGenerator.py
@@ -43,11 +43,11 @@ class Log:
     def Info(self, text, file = ""):
         if BE_VERBOSE:
             self.infos.append("%s: INFO: %s%s%s" % (NAME, file, ": " if file else "", text))
-            print self.infos[-1]
+            print(self.infos[-1])
     def Warn(self, text, file = ""):
         if SHOW_WARNINGS:
             self.warnings.append("%s: WARNING: %s%s%s" % (NAME, file, ": " if file else "", text))
-            print self.warnings[-1]
+            print(self.warnings[-1])
     def Error(self, text, file = ""):
             self.errors.append("%s: ERROR: %s%s%s" % (NAME, file, ": " if file else "", text))
             print >> sys.stderr, self.errors[-1]
@@ -55,9 +55,9 @@ class Log:
         print("%s: %s%s%s" % (NAME, file, ": " if file else "", text))
     def Dump(self):
             if self.errors or self.warnings or self.infos:
-                print ""
+                print("")
                 for item in self.errors + self.warnings + self.infos:
-                    print item
+                    print(item)
 
 
 log = Log()
@@ -145,8 +145,14 @@ def GenerateStubs(output_file, source_file, defaults = "", scan_only = False):
         raise NoInterfaceError(source_file)
 
     for iface in interfaces:
-        if iface.id < MIN_INTERFACE_ID:
-            log.Warn("invalid interface ID %s (%s) of %s - shall be at least 0x40" % (hex(iface.id) if isinstance(iface.id, (long, int)) else "?", str(iface.id), iface.obj.full_name), source_file)
+
+        min_interface_id = str(MIN_INTERFACE_ID)
+
+        if isinstance(iface.id, int):
+            min_interface_id = MIN_INTERFACE_ID
+
+        if iface.id < min_interface_id:
+            log.Warn("invalid interface ID %s (%s) of %s - shall be at least 0x40" % (hex(iface.id) if isinstance(iface.id, int) else "?", str(iface.id), iface.obj.full_name), source_file)
 
     if scan_only:
         return interfaces
@@ -1099,7 +1105,7 @@ def GenerateStubs(output_file, source_file, defaults = "", scan_only = False):
         if announce_list:
             emit.Line()
 
-        for key, val in announce_list.iteritems():
+        for key, val in announce_list.items():
             emit.Line("typedef ProxyStub::UnknownStubType<%s, %s> %s;" % (key, val[1], val[2]))
 
         emit.Line()
@@ -1111,7 +1117,7 @@ def GenerateStubs(output_file, source_file, defaults = "", scan_only = False):
         emit.Line("{")
         emit.IndentInc()
 
-        for key, val in announce_list.iteritems():
+        for key, val in announce_list.items():
             emit.Line("RPC::Administrator::Instance().Announce<%s, %s, %s>();" % (key, val[0], val[2]))
 
         emit.IndentDec()
@@ -1161,24 +1167,24 @@ if __name__ == "__main__":
         INTERFACE_NAMESPACE = "::" + INTERFACE_NAMESPACE
 
     if args.help_tags:
-        print "The following special tags are supported:"
-        print "   @stubgen:skip     - skip parsing of the rest of the file"
-        print "   @stubgen:omit     - omit generating code for the next item (class or method)"
-        print "   @stubgen:stub     - generate empty stub for the next item (class or method)"
-        print "For non-const pointer and reference method/function parameters:"
-        print "   @in               - denotes an input parameter"
-        print "   @out              - denotes an output parameter"
-        print "   @inout            - denotes an input/output parameter (equivalent of @in @out)"
-        print "   @length:<expr>    - specifies a buffer length value (a constant, a parameter name or a math expression)"
-        print "   @maxlength:<expr> - specifies a maximum buffer length value (a constant, a parameter name or a math expression),"
-        print "                       if not specified @length is used as maximum length, use round parenthesis for expressions,"
-        print "                       e.g.: @length:bufferSize @length:(width*height*4)"
-        print ""
-        print "The tags shall be placed inside comments."
+        print("The following special tags are supported:")
+        print("   @stubgen:skip     - skip parsing of the rest of the file")
+        print("   @stubgen:omit     - omit generating code for the next item (class or method)")
+        print("   @stubgen:stub     - generate empty stub for the next item (class or method)")
+        print("For non-const pointer and reference method/function parameters:")
+        print("   @in               - denotes an input parameter")
+        print("   @out              - denotes an output parameter")
+        print("   @inout            - denotes an input/output parameter (equivalent of @in @out)")
+        print("   @length:<expr>    - specifies a buffer length value (a constant, a parameter name or a math expression)")
+        print("   @maxlength:<expr> - specifies a maximum buffer length value (a constant, a parameter name or a math expression),")
+        print("                       if not specified @length is used as maximum length, use round parenthesis for expressions,")
+        print("                       e.g.: @length:bufferSize @length:(width*height*4)")
+        print("")
+        print("The tags shall be placed inside comments.")
         sys.exit()
 
     if args.show_version:
-        print "Version: " + VERSION
+        print("Version: " + VERSION)
         sys.exit()
 
     if not args.path:
@@ -1208,7 +1214,7 @@ if __name__ == "__main__":
                     # dump interfaces if only scanning
                     for f in sorted(output, key=lambda x: x.id):
                         if scan_only:
-                            print f.id, f.obj.full_name
+                            print(f.id, f.obj.full_name)
 
                 except SkipFileError as err:
                     log.Print("skipped file '%s'" % err)
@@ -1223,15 +1229,15 @@ if __name__ == "__main__":
                     log.Error(err)
 
             if scan_only:
-                print "\nInterface dump:"
+                print("\nInterface dump:")
 
             sorted_faces = sorted(faces, key=lambda x: x.id)
             for i, f in enumerate(sorted_faces):
-                if isinstance(f.id, (long, int)):
+                if isinstance(f.id, int):
                     if scan_only:
                         if i and sorted_faces[i - 1].id < f.id - 1:
-                            print "..."
-                        print "%s (%s) - '%s'" % (hex(f.id) if isinstance(f.id, (int, long)) else "?", str(f.id), f.obj.full_name)
+                            print("...")
+                        print("%s (%s) - '%s'" % (hex(f.id) if isinstance(f.id, (int, long)) else "?", str(f.id), f.obj.full_name))
                     if i and sorted_faces[i - 1].id == f.id:
                         log.Warn("duplicate interface ID %s (%s) of %s" % (hex(f.id) if isinstance(f.id, (int, long)) else "?", str(f.id), f.obj.full_name), f.file)
                 else:
@@ -1239,7 +1245,7 @@ if __name__ == "__main__":
 
 
             if len(interface_files) > 1 and BE_VERBOSE:
-                print ""
+                print("")
 
             log.Print(("all done; %i file%s processed" % (len(interface_files) - len(skipped), "s" if len(interface_files) - len(skipped) > 1 else "")) + \
                 ((" (%i file%s skipped)" % (len(skipped), "s" if len(skipped) > 1 else "")) if skipped else "") + \
